GETTING PAYPAL TO WORK WITH EASY!APPOINTMENTS
I did not develop this process with ease of installation in mind.  I just developped it little by little on my site until it worked.  I did not really think about how others will install it and how involved it would be.  Nevertheless, after trying to explain the process to another Easy!Appointments user, Felipe, I have tried to make some clear instructions.  This is my atttempt.

//INSTALL AND ACTIVATE WP-INVOICE WITH SINGLE PAGE CHECKOUT ADDON
https://wordpress.org/plugins/wp-invoice/
https://www.usabilitydynamics.com/product/wp-invoice-single-page-checkout
To use my PayPal option you need to install and activate the WP-Invoice plugin with the Single Page Checkout addon activated. 
You need to get a PayPal IPN URL from your paypal account: https://www.usabilitydynamics.com/product/wp-invoice/docs/paypal-payment-settings-in-wp-invoice-plugin
You need your paypal account activated within WP-Invoice.

//EASY!APPOINTMENTS SETTINGS PAGE
On the settings set: 

	WP-Invoice Integration (In WP with WP-Invoice Plugin installed only) = Yes

	PayPal Invoice Item suffix = any suffix you want to appear in your paypal invoice (no spaces).  I use "-MyBusinessName"

//WORDPRESS PATIENT LOGIN
You need to have a login procedure for your wordpress site and you need to have easy appointments sitting behind the login.  

For a patient log in, minimally you will need to install and activate the following:

* Postman SMTP (or similar this handles email for log in registration process) https://wordpress.org/plugins/post-smtp/
* Nav Menu Roles https://wordpress.org/plugins/nav-menu-roles/ 
* Peter's Login Redirect https://wordpress.org/plugins/peters-login-redirect/ 
* User Role Editor https://wordpress.org/plugins/user-role-editor/

Your WordPress server should be configured with SSL. For this you will need a domain name and a SSL certificate. There are many commercial sources for these -- if you don't already have one you are comfortable with, try namecheap.com and their "RapidSSL" certificates.  If you are planning on only allowing patients to schedule on the site this should be enough.  But if you plan to exchange patient information beyond this you would likely need your own server to increase security.  It is also best to have all protected patient information stored in a different location that can only be reached by a VPN. 

The first plug-in to configure is "User Role Editor". In the administrative area go to Users -> User Role Editor. Click "Add Role" and create a new role with an ID of "patient" (this specific ID is required, all lower case) and a display name of "Patient". Make it a copy of the Subscriber role so that its only capability is "read". This is the role that will be assigned to your patients. Also if patients will self-register for a portal account, be sure to set the primary default role to "patient" or "client".

Then it would be good to review and customize all of your system settings. In the administrative area you'll see that "Settings" is broken down into about 9 sections: General, Writing, Reading, etc. The WP instructions will help you with these, but here are a some special notes:

In Reading, you probably want your front page to display a static page.
In Login/logout redirects, you will want the "patient" role to redirect to a suitable page upon login. Plan to set that up after you have created some initial pages.

Be sure to configure Postman SMTP or whatever you use to manage outgoing mail. This is to make sure that you and your users get any appropriate mail that may be generated.

You probably want most or all of your pages with forms to be available only to logged-in patients. The "Nav Menu Roles" plug-in will make that easy. 

//ADD SOME WORDPRESS PAGES
You need to make a page in Wordpress titled:

	processingpayment

	add this short code to the page: [paypalpay]

You need to make another Wordpress page titled "payment-success". After replacing the text "pathtowordpresssite" with the path to your wordpress site, add the following in the text tab for the content (do not past this in the Visual tab):

	<h1 style="text-align: center;">Your Payment Was Successful</h1>
	<h2 style="text-align: center;">Thank you...</h2>
	<p style="text-align: center;">A receipt for transaction has been emailed to you. Complete details of this transaction are found at this link:</p>

	<div id="fep-menu" style="text-align: center;"><a class="fep-button" title="Invoice Dashboard" href="https://pathtowordpresssite/paymentdashboard/">Payment Dashboard</a></div>
	&nbsp;
	<p style="text-align: center;">You may also log into your account at www.paypal.com to view financial details of this transaction.</p>

	
You need to run a cronjob that will launch the Paypaltimer.php script once every 60 seconds.  This deletes all pending appointments with payments not completed within 10 minutes.

//ADD A FUNCTION TO FUNCTIONS.PHP IN YOUR WORDPRESS THEME
Within the functions.php file of your theme you need to add the following two functions 

//Shortcode for PayPal Payments with Easy!Appointments. Place this in your Functions.php file.
//Replace the following with url addresses that corespond to your site: 
//  https://PATHTOYOUREASY!APPOINTMENTS.COM  (three instances)
//  https://PATHTOYOURWORDPRESS.COM (one instance)
//Make a page in wordpress titled "processingpayment" and place in it the shortcode: [paypalpay]
function paypalpayment() {
	global $wpdb;
	$user = wp_get_current_user();
	$user_ID = $user->ID;
    $shortcode = $wpdb->get_row("SELECT MAX(ap.pending) AS pending, ap.book_datetime, ap.id, ap.hash FROM ea_appointments AS ap "
			."INNER JOIN ea_users AS us ON ap.id_users_customer = us.id "
			."WHERE us.wp_id ='".$user_ID."'");
	$html = '';
	
	if ($shortcode->pending == ''){
		$html .= '<h1>Processing Error: Appointment has been deleted. </h1>';
		$html .= '<p align="center"><a class="fep-button" style="width: 195px; text-align: center;" href="https://PATHTOYOUREASY!APPOINTMENTS.COM"><img height="18" width="18"/> Schedule an appointment</a></p>';
	} else {
		$html .= '<h2>Fee Policy</h2>';
		$html .= '<p>You may reschedule an appointment without charge within 24 hours of your appointment.  Cancelation of an appointment within 24 hours can either result in a refund or a credit for your next appointment per your request. You will need to inform Mr. Tucker on the discussion board about how you would like your cancelation to be handled. If you would like a refund, refunds will be the full amount of the cost of your session minus the PayPal processing fees. There are no refunds for cancelations later than 24 hours in advance.</p>';
		date_default_timezone_set('America/Los_Angeles');
		$refreshtime = strtotime($shortcode->book_datetime) - strtotime("-10 minutes");

		$html .= '<meta http-equiv="refresh" content="';
		$html .=   $refreshtime;
		$html .=  '">';
	if(strtotime($shortcode->book_datetime) > (strtotime("-10 minutes"))){
		$html .= '<style>
			ul.wpi_checkout_block.wpi_checkout_billing_address {
				display: none;
			} 
			ul.wpi_checkout_block.wpi_checkout_customer_information {
				display: none;
			}	
			ul.wpi_checkout_block.wpi_checkout_billing_information {
				display: none;
			}
			.wpi_checkout_submit_btn.btn.btn-success.wpi_checkout_process_payment.wpi_paypal {
				margin: -1px;
			}
			input {
				margin-top: 10px;
				width: 130px;
			}
			form.wpi_checkout .total_price {
				top: 1px;
			}
			.loader {
			  border: 4px solid #f3f3f3;
			  border-radius: 50%;
			  border-top: 4px solid #3498db;
			  width: 30px;
			  height: 30px;
			  -webkit-animation: spin 2s linear infinite; /* Safari */
			  animation: spin 2s linear infinite;
			}

			/* Safari */
			@-webkit-keyframes spin {
			  0% { -webkit-transform: rotate(0deg); }
			  100% { -webkit-transform: rotate(360deg); }
			}

			@keyframes spin {
			  0% { transform: rotate(0deg); }
			  100% { transform: rotate(360deg); }
			} 

			div#spinner {
				margin-left: 160px;
				position: absolute;
			}
			
			input#stepone {
				position: absolute;
				margin-top: -2px;
				padding: 0px;
			}
		</style>';
		
		$html .= '<input type="button" id="stepone" onclick="processpaypal()" value="Process Payment">';
		$html .= '<div id="spinner" class="loader" style="display:none"></div>';
        $html .= do_shortcode($shortcode->pending);
		$html .= '<input type="button" onclick="deletapt()" value="Refuse/Delete">';
		$html .= '<script>
			cancelurl = "https://PATHTOYOUREASY!APPOINTMENTS.COM/index.php/appointments/cancel/' . $shortcode->hash . '";
			function deletapt(){
				window.location = cancelurl;
			}
			$(document).ready(function() {
				$("input[name=return]").val("https://PATHTOYOURWORDPRESS.COM/payment-success/");
				$("input[name=cancel_return]").val(cancelurl);
			});  
			
			function processpaypal(){
				$("#spinner").css("display","block");
				$("#stepone").css("display","none");
				setTimeout(
				function() 
				{
					$(".wpi_checkout_submit_btn").click();
				}, 250);				
			}
		
    	</script>';
		}else{
        $html .= '<h4 style="text-align: center;">Time has expired</h4>';
		$html .= '<p align="center"><a class="fep-button" style="width: 195px; text-align: center;" href="[url]/?p=369"><img height="18" width="18" src="https://PATHTOYOUREASY!APPOINTMENTS.COM" /> Schedule an appointment</a></p>';
		}
	}	
	return $html;
}
add_shortcode("paypalpay", "paypalpayment");

//PayPal Callback function that replaces the cryptic suffix with actual service names in patients the WP-Invoice file.
function ea_paypalcallback($transaction_data){
	global $wpdb;
	//Grab Service Name and Date 
	$session_id = $transaction_data[post_data][created_by][0];
	$posturl = $transaction_data[post_data][guid][0];
	$urlArray = explode('=',$posturl);
	$postid = $urlArray[sizeof($urlArray)-1];
	$dummyname = $transaction_data[items][1][name];
	$query = "SELECT concat(eas.name, '  ', DATE_FORMAT(eaa.start_datetime, '%m/%d/%Y') ) FROM ea_services AS eas  " .
	"LEFT JOIN  ea_appointments AS eaa ON eaa.id_services =  eas.id WHERE eaa.pending LIKE '%" . $session_id . "%'";
	$servicename = $wpdb->get_var($query);	
	$wpdb->query($wpdb->prepare("UPDATE {$wpdb->prefix}posts SET post_content = REPLACE(post_content, 'Items: $dummyname', '$dummyname: $servicename') WHERE ID = $postid"));
	$wpdb->query($wpdb->prepare("UPDATE $wpdb->postmeta SET meta_value = REPLACE(meta_value, '$session_id', '') WHERE meta_key = 'post_title' AND post_id = $postid"));
	$wpdb->query($wpdb->prepare("UPDATE ea_appointments SET pending = '' WHERE pending LIKE '%$session_id%'"));
	
	// the message
	$var = $postid;
}

//CHOOSE A CRYPTIC SUFFIX FOR PAYPAL 
In /application/language/english/translations_lang.php edit the entry for: 

    $lang['wp_invoice_see_at'] = 'Invoice-Service';

In this example Invoice-Service is just a suffix I attach to the service ID# (as described in the next section). The "Invoice-Service" is arbitrary, you can make it what ever you want or leave it out completely.  I use my business name.  The suffix is the cryptic information that will appear in the PayPal ledger. For the sake of confidentiality, I am providing minimal information to PayPal about the service purchased. 

//ADD ITEMS TO THE WP-INVOICE LINE ITEMS TAB
The last step:
In WP-Invoice settings> line items, there need to be items listed there.  This is the system that I used:

I went into phpMyAdmin and to the Easy!Appointments table: ea_services and used the service ID number attached to the suffix you assigned in the previous section. This creates each item in the line items table of WP-Invoices such as this:

Name & Description	|Qty. 	|Price

13Invoice-Service		|1		|140
17Invoice-Service		|1		|252
18Invoice-Service		|1		|110 

And so on . . .

The cryptic 13Invoice-Service is replaced in WP-Invoice with the full information about the service as you entered in Easy!Appointments.  So, the client can get more complete information by looking at the invoice securely stored on your site.

This is not the most efficient method  and it means that when you change your price for a service you need to enter it into two places.  But it works for now.  If others want to add code to automatically do this -- feel free to do so and share.